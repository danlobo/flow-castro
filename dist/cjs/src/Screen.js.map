{"version":3,"file":"Screen.js","sources":["../../../src/Screen.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport Node from './Node.jsx';\nimport { \n  TransformWrapper, \n  TransformComponent \n} from \"react-zoom-pan-pinch\";\nimport { useDragContext } from './DragContext.jsx';\nimport { useScreenContext } from './ScreenContext.jsx';\nimport { ConnectorCurve } from './ConnectorCurve.jsx';\nimport { ContextMenu } from './ContextMenu.jsx';\nimport { nanoid } from 'nanoid';\n\nfunction NodeContainer({ portTypes, nodeTypes, state, onChangeState }) {\n  const { dragInfo } = useDragContext()\n  const { position, setPosition, scale, setScale } = useScreenContext();\n\n  const [dstDragPosition, setDstDragPosition] = useState({ x: 0, y: 0 })\n  const [pointerPosition, setPointerPosition] = useState({ x: 0, y: 0 })\n\n  useEffect(() => {\n    if (!dragInfo) {\n      setDstDragPosition(null)\n      return\n    }\n\n    const mouseMoveListener = (event) => {\n      setPointerPosition({\n        x: event.pageX - window.scrollX,\n        y: event.pageY - window.scrollY,\n      })\n\n      if (!dragInfo) return\n\n      const { startX, startY } = dragInfo\n      const dx = event.pageX //- startX\n      const dy = event.pageY //- startY\n\n      setDstDragPosition({ x: dx, y: dy })\n    }\n\n    window.addEventListener('mousemove', mouseMoveListener)\n    return () => {\n      window.removeEventListener('mousemove', mouseMoveListener)\n    }\n  }, [dragInfo])\n\n  const addNode = useCallback((nodeType, pos) => {\n    const newNode = {\n      id: nanoid(),\n      name: nodeType.label,\n      type: nodeType.type,\n      position: pos,\n      values: {}\n    }\n\n    onChangeState(prev => ({ ...prev, nodes: [...prev.nodes, newNode]}))\n  }, [onChangeState])\n\n  const removeNode = useCallback((id) => {\n    const node = state.nodes.find(node => node.id === id)\n    if (!node)  return\n\n    const nodesToRemove = [id]\n    const nodesToAdd = []\n\n    node.connections.outputs?.forEach(conn => {\n      const otherNode = state.nodes.find(node => node.id === conn.node)\n\n      if (!otherNode) return\n\n      nodesToRemove.push(otherNode.id)\n      nodesToAdd.push({\n        ...otherNode,\n        connections: {\n          outputs: otherNode.connections.outputs,\n          inputs: otherNode.connections.inputs.filter(c => !(c.port === conn.name && c.node === node.id))\n        }\n      })\n    })\n\n    node.connections.inputs?.forEach(conn => {\n      const otherNode = state.nodes.find(node => node.id === conn.node)\n\n      if (!otherNode) return\n\n      nodesToRemove.push(otherNode.id)\n      nodesToAdd.push({\n        ...otherNode,\n        connections: {\n          outputs: otherNode.connections.outputs.filter(c => !(c.port === conn.name && c.node === node.id)),\n          inputs: otherNode.connections.inputs\n        }\n      })\n    })\n\n\n\n    onChangeState(prev => ({ \n      ...prev, \n      nodes: [\n        ...prev.nodes.filter(node => !nodesToRemove.includes(node.id)),\n        ...nodesToAdd\n      ]\n    }))\n  }, [onChangeState, state?.nodes])\n\n  const cloneNode = useCallback((id) => {\n    const node = state.nodes.find(node => node.id === id)\n    const newNode = {\n      ...node,\n      id: nanoid(),\n      position: { x: node.position.x + 20, y: node.position.y + 20 },\n      connections: {\n        inputs: [],\n        outputs: []\n      }\n    }\n\n    onChangeState(prev => ({ ...prev, nodes: [...prev.nodes, newNode]}))\n  }, [onChangeState, state?.nodes])\n\n  const removeConnectionFromOutput = useCallback((srcNode, srcPort, dstNode, dstPort) => {\n    onChangeState(prev => ({\n      ...prev,\n      nodes: prev.nodes.map(node => {\n        if (node.id === srcNode) {\n          return {\n            ...node,\n            connections: {\n              inputs: node.connections.inputs,\n              outputs: node.connections.outputs.filter(conn => !(conn.name === srcPort && conn.node === dstNode && conn.port === dstPort))\n            }\n          }\n        } else if (node.id === dstNode) {\n          return {\n            ...node,\n            connections: {\n              inputs: node.connections.inputs.filter(conn => !(conn.name === dstPort && conn.node === srcNode && conn.port === srcPort)),\n              outputs: node.connections.outputs\n            }\n          }\n        }\n\n        return node\n      })\n    }))\n  }, [onChangeState])\n\n  const screenRef = useRef()\n\n  const [isMoveable, setIsMoveable] = useState(false);\n  const [canMove, setCanMove] = useState(true);\n\n  const onZoom = useCallback((params) => {\n    const _scale = params.state.scale;\n    setScale(_scale);\n\n    onChangeState(prev => ({ ...prev, scale: _scale }));\n\n    const _position = {x: params.state.positionX, y: params.state.positionY };\n    setPosition(_position);\n  }, [])\n\n  const onTransform = useCallback((params) => {  \n    const _position = {x: params.state.positionX, y: params.state.positionY };\n    setPosition(_position);\n\n    onChangeState(prev => ({ ...prev, position: _position }));\n  }, [])\n\n  const gridSize = 40;\n  const scaledGridSize = gridSize * scale;\n  const scaledPositionX = (position.x) % scaledGridSize;\n  const scaledPositionY = (position.y) % scaledGridSize;\n\n  const onConnect = useCallback(({ source, target }) => {\n    if (!state?.nodes) return;\n\n    const item = {\n      srcNode: source.nodeId,\n      dstNode: target.nodeId,\n      srcPort: source.portName,\n      dstPort: target.portName,\n    }\n\n    if (item.srcNode === item.dstNode) return;\n    \n    const srcNodeIdx = state.nodes.findIndex(n => n.id === item.srcNode);\n    const dstNodeIdx = state.nodes.findIndex(n => n.id === item.dstNode);\n    \n    // deep merge\n    const srcNode = JSON.parse(JSON.stringify(state.nodes[srcNodeIdx]));\n    const dstNode = JSON.parse(JSON.stringify(state.nodes[dstNodeIdx]));\n\n    const srcPort = nodeTypes[srcNode.type].outputs.find(p => p.name === item.srcPort);\n    const dstPort = nodeTypes[dstNode.type].inputs.find(p => p.name === item.dstPort);\n\n    if (srcPort.type !== dstPort.type) return;\n\n    if (!srcNode.connections)   srcNode.connections = {};\n    if (!srcNode.connections.outputs) srcNode.connections.outputs = [];\n    if (!srcNode.connections.inputs)  srcNode.connections.inputs = [];\n\n\n    if (!dstNode.connections)   dstNode.connections = {};\n    if (!dstNode.connections.outputs) dstNode.connections.outputs = [];\n    if (!dstNode.connections.inputs)  dstNode.connections.inputs = [];\n\n    if (!srcNode.connections.outputs.find(c => c.name === dstPort.name)) {\n      srcNode.connections.outputs.push({ name: srcPort.name, node: dstNode.id, port: dstPort.name });\n    }\n\n    if (!dstNode.connections.inputs.find(c => c.name === srcPort.name)) {\n      dstNode.connections.inputs.push({ name: dstPort.name, node: srcNode.id, port: srcPort.name });\n    }\n\n    const minNodeIdx = Math.min(srcNodeIdx, dstNodeIdx);\n    const maxNodeIdx = Math.max(srcNodeIdx, dstNodeIdx);\n    const minNode = srcNodeIdx < dstNodeIdx ? srcNode : dstNode;\n    const maxNode = srcNodeIdx < dstNodeIdx ? dstNode : srcNode;\n\n    onChangeState(prev => ({\n      ...prev,\n      nodes: [\n        ...prev.nodes.slice(0, minNodeIdx),\n        minNode,\n        ...prev.nodes.slice(minNodeIdx + 1, maxNodeIdx),\n        maxNode,\n        ...prev.nodes.slice(maxNodeIdx + 1)\n      ]\n    }))\n  }, [state?.nodes, onChangeState, nodeTypes]);\n\n  const pinchOptions = useMemo(() => ({\n    step: 5,\n  }), [])\n  const panningOptions = useMemo(() => ({\n    disabled: isMoveable,\n    excluded: ['node', 'react-draggable', 'port', 'port-connector']\n  }), [isMoveable])\n\n  const wrapperStyle = useMemo(() => ({\n    height: '100vh', \n    width: '100vw',\n    backgroundSize: `${scaledGridSize}px ${scaledGridSize}px`,\n    backgroundImage: `linear-gradient(to right, #CCCCCC 1px, transparent 1px), linear-gradient(to bottom, #CCCCCC 1px, transparent 1px)`,\n    backgroundPosition: `${scaledPositionX}px ${scaledPositionY}px`\n  }), [scaledGridSize, scaledPositionX, scaledPositionY])\n\n\n  const nodeTypesByCategory = useMemo(() => {\n    const categories = Object.values(nodeTypes).reduce((acc, nodeType) => {\n      const _category = nodeType.category ?? '...';\n      if (!acc[_category]) acc[_category] = [];\n      acc[_category].push(nodeType);\n      return acc;\n    }, {})\n\n    return Object.entries(categories).map(([category, nodeTypes]) => ({\n      category,\n      nodeTypes\n    }))\n  }, [nodeTypes])\n\n  const wrapperProps = useCallback((handleContextMenu) => ({\n    onDragOver: (e) => {\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.effectAllowed = \"move\";\n    },\n    onDragLeave: (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    onContextMenu: (e) => handleContextMenu(e, nodeTypesByCategory\n      .map(({ category, nodeTypes }) => ({\n        label: category,\n        children: nodeTypes.sort((a,b) => a.label.localeCompare(b.label)).map(nodeType => ({\n          label: `Adicionar ${nodeType.label}`,\n          description: nodeType.description,\n          onClick: () => {\n            const { x, y } = e.target.getBoundingClientRect();\n            const position = {\n              x: e.clientX, // - x,\n              y: e.clientY// - y\n            }\n            addNode(nodeType, position);\n          }\n        }))\n      }))\n    )\n  }), [nodeTypesByCategory, addNode])\n\n  if (!state) return null\n\n  return (\n    <div style={{ position: 'relative', border: `1px solid blue` }}>\n      <TransformWrapper\n        initialScale={state?.scale ?? 1}\n        initialPositionX={state?.position?.x ?? 0}\n        initialPositionY={state?.position?.y ?? 0}\n        disabled={isMoveable}\n        minScale={.25}\n        maxScale={2}\n        limitToBounds={false}\n        onPanning={onTransform}\n        onZoom={onZoom}\n        pinch={pinchOptions}\n        panning={panningOptions}\n      >\n        {({ zoomIn, zoomOut, resetTransform, setTransform, centerView, ...rest }) => (\n          <>\n            <div style={{ \n              position: 'absolute', \n              bottom: '40px', \n              right: '40px', \n              zIndex: 1000, \n              width: '30px',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              backgroundColor: 'white',\n              border: '1px solid #CCC',\n              borderRadius: '.5rem',\n              padding: '.5rem',\n              boxShadow: '0 0 5px #CCC',\n              gap: '.5rem'\n              }}\n            >\n              <button style={{ width: '30px', height: '30px' }} onClick={() => zoomIn()}>+</button>\n              <button style={{ width: '30px', height: '30px' }} onClick={() => zoomOut()}>-</button>\n              <button style={{ width: '30px', height: '30px' }} onClick={() => centerView()}>C</button>\n              <button style={{ width: '30px', height: '30px' }} onClick={() => {setTransform(position.x, position.y, 1); setScale(1);} }>Z</button>\n              \n              <button style={{ width: '30px', height: '30px' }} onClick={() => setCanMove(!canMove)}>{canMove ? 'L' : 'U'}</button>\n            </div>\n\n            <div style={{ \n              position: 'absolute', \n              bottom: '40px', \n              right: '150px', \n              zIndex: 1000,\n              width: '120px',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              backgroundColor: 'white',\n              border: '1px solid #CCC',\n              borderRadius: '.5rem',\n              padding: '.5rem',\n              boxShadow: '0 0 5px #CCC',\n              gap: '.5rem',\n              fontSize: '9px'\n              }}\n            >\n              <div>Scale: {scale}</div>\n              <div>Position: {JSON.stringify(position)}</div>\n              <div>Pointer: {JSON.stringify(pointerPosition)}</div>\n            </div>\n            <ContextMenu>\n              {({ handleContextMenu }) => (\n                <TransformComponent \n                  contentClass='main' \n                  wrapperStyle={wrapperStyle}\n                  wrapperProps={wrapperProps(handleContextMenu)}\n                  >\n                  {state?.nodes?.map((node, index) => {\n                    return (\n                      <>\n                        <Node \n                          id={`node_${node.id}`}\n                          key={`node_${node.id}`} \n                          name={node.name}\n                          portTypes={portTypes}\n                          nodeType={nodeTypes?.[node.type]}\n                          value={node}\n                          onValueChange={(v) => {\n                            onChangeState(prev => ({\n                              ...prev,\n                              nodes: [\n                                ...prev.nodes.slice(0, index),\n                                { ...prev.nodes[index], values: {...v.values } },\n                                ...prev.nodes.slice(index + 1)\n                              ]\n                            }))\n                          }}\n                          onChangePosition={(position) => {\n                            console.log('onChangePosition', position)\n\n                            onChangeState(prev => ({\n                              ...prev,\n                              nodes: [\n                                ...prev.nodes.slice(0, index),\n                                { ...prev.nodes[index], position },\n                                ...prev.nodes.slice(index + 1)\n                              ]\n                            }))\n                          }}\n                          containerRef={screenRef}\n                          canMove={canMove}\n                          onConnect={onConnect}\n                          onContextMenu={(e) => handleContextMenu(e, [\n                            { label: 'Clonar este nó', onClick: () => {\n                              cloneNode(node.id)\n                            }},\n                            { \n                              label: `Remover este nó`, \n                              style: { color: 'red'},\n                              onClick: () => {\n                                removeNode(node.id)\n                              }\n                            }\n                          ])}\n                          onResize={(size) => {\n                            // O objetivo aqui é disparar a renderização das conexões.\n                            // Se houver um modo melhor, por favor, me avise.\n                            console.log('onResize', size)\n                            onChangeState(prev => ({\n                              ...prev,\n                              nodes: [\n                                ...prev.nodes.slice(0, index),\n                                { \n                                  ...prev.nodes[index], \n                                  connections: {\n                                    ...prev.nodes[index].connections,\n                                    outputs: [ ...(prev.nodes[index].connections?.outputs ?? [])],\n                                  },\n                                  size \n                                },\n                                ...prev.nodes.slice(index + 1)\n                              ]\n                            }))\n                          }}\n                        />\n                        {node.connections?.outputs?.map((connection, index) => {\n                          const srcNode = node.id\n                          const srcPort = connection.name\n                          const dstNode = connection.node\n                          const dstPort = connection.port\n\n                          const srcElem = document.getElementById(`card-${srcNode}-output-${srcPort}`);\n                          const dstElem = document.getElementById(`card-${dstNode}-input-${dstPort}`);\n                    \n                          if (!srcElem || !dstElem) {\n                            return null;\n                          }\n                    \n                          const srcRect = srcElem.getBoundingClientRect();\n                          const dstRect = dstElem.getBoundingClientRect();\n                    \n                          const srcPos = {\n                            x: (srcRect.x + window.scrollX - position.x + srcRect.width / 2) / scale,\n                            y: (srcRect.y + window.scrollY - position.y + srcRect.height / 2) / scale\n                          }\n                    \n                          const dstPos = {\n                            x: (dstRect.x + window.scrollX - position.x + dstRect.width / 2) / scale,\n                            y: (dstRect.y + window.scrollY - position.y + dstRect.height / 2) / scale\n                          }\n\n                          return <ConnectorCurve\n                            key={`connector-${srcNode}-${srcPort}-${dstNode}-${dstPort}`}\n                            src={srcPos}\n                            dst={dstPos}\n                            scale={scale}\n                            onContextMenu={(e) => handleContextMenu(e, [\n                              {\n                                label: `Remover esta conexão`, \n                                style: { color: 'red'},\n                                onClick: () => {\n                                  removeConnectionFromOutput(srcNode, srcPort, dstNode, dstPort)\n                                }\n                              }\n                            ])}\n                          />\n                        })}\n                      </>\n                    )\n                  })}\n\n                  {dragInfo && dstDragPosition && <ConnectorCurve tmp src={{\n                    x: (dragInfo.startX + window.scrollX - position.x + 5) / scale,\n                    y: (dragInfo.startY + window.scrollY - position.y + 5) / scale\n                  }}\n                  dst={{\n                    x: (dstDragPosition.x + window.scrollX - position.x) / scale,\n                    y: (dstDragPosition.y + window.scrollY - position.y) / scale\n                  }}\n                  scale={scale}\n                  />}\n                </TransformComponent>\n              )}\n            </ContextMenu>      \n          </>\n        )}\n      </TransformWrapper>\n    </div>\n  );\n}\n\nexport default NodeContainer;"],"names":["NodeContainer","_ref","_state$scale","_state$position$x","_state$position","_state$position$y","_state$position2","portTypes","nodeTypes","state","onChangeState","dragInfo","useDragContext","position","setPosition","scale","setScale","useScreenContext","dstDragPosition","setDstDragPosition","useState","x","y","pointerPosition","setPointerPosition","useEffect","mouseMoveListener","event","pageX","window","scrollX","pageY","scrollY","dx","dy","addEventListener","removeEventListener","addNode","useCallback","nodeType","pos","newNode","id","nanoid","name","label","type","values","prev","_objectSpread","nodes","removeNode","_node$connections$out","_node$connections$inp","node","find","nodesToRemove","nodesToAdd","connections","outputs","forEach","conn","otherNode","push","inputs","filter","c","port","includes","cloneNode","removeConnectionFromOutput","srcNode","srcPort","dstNode","dstPort","map","screenRef","useRef","isMoveable","setIsMoveable","canMove","setCanMove","onZoom","params","_scale","_position","positionX","positionY","onTransform","gridSize","scaledGridSize","scaledPositionX","scaledPositionY","onConnect","_ref2","source","target","item","nodeId","portName","srcNodeIdx","findIndex","n","dstNodeIdx","JSON","parse","stringify","p","minNodeIdx","Math","min","maxNodeIdx","max","minNode","maxNode","slice","pinchOptions","useMemo","step","panningOptions","disabled","excluded","wrapperStyle","height","width","backgroundSize","concat","backgroundImage","backgroundPosition","nodeTypesByCategory","categories","Object","reduce","acc","_nodeType$category","_category","category","entries","_ref3","wrapperProps","handleContextMenu","onDragOver","e","dataTransfer","dropEffect","effectAllowed","onDragLeave","preventDefault","stopPropagation","onContextMenu","_ref4","children","sort","a","b","localeCompare","description","onClick","getBoundingClientRect","clientX","clientY","_jsx","style","border","TransformWrapper","initialScale","initialPositionX","initialPositionY","minScale","maxScale","limitToBounds","onPanning","pinch","panning","_ref5","zoomIn","zoomOut","resetTransform","setTransform","centerView","rest","_objectWithoutProperties","_excluded","_jsxs","_Fragment","bottom","right","zIndex","display","flexDirection","justifyContent","alignItems","backgroundColor","borderRadius","padding","boxShadow","gap","fontSize","ContextMenu","_ref6","_state$nodes","TransformComponent","contentClass","index","_node$connections","_node$connections$out2","Node","value","onValueChange","v","onChangePosition","console","log","containerRef","color","onResize","size","_prev$nodes$index$con","_prev$nodes$index$con2","connection","srcElem","document","getElementById","dstElem","srcRect","dstRect","srcPos","dstPos","ConnectorCurve","src","dst","tmp","startX","startY"],"mappings":"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"}
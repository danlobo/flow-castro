{"version":3,"file":"Screen.js","sources":["../../../src/Screen.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport Node from './Node.jsx';\nimport { \n  TransformWrapper, \n  TransformComponent \n} from \"react-zoom-pan-pinch\";\nimport { useDragContext } from './DragContext.jsx';\nimport { useScreenContext } from './ScreenContext.jsx';\nimport { ConnectorCurve } from './ConnectorCurve.jsx';\nimport { ContextMenu } from './ContextMenu.jsx';\nimport { nanoid } from 'nanoid';\nimport css from './Screen.module.css';\n\nimport nodeCss from './Node.module.css'\nimport nodePortCss from './NodePort.module.css'\nimport { useTheme } from './ThemeProvider.js';\nimport Button from './Button.jsx';\n\n\nfunction Screen({ portTypes, nodeTypes, onChangeState, initialState }) {\n\n  const { currentTheme } = useTheme()\n\n  const PORT_SIZE = 20\n\n  const style = {\n    '--port-size': `${PORT_SIZE}px`,\n    '--color-primary': currentTheme.colors.primary,\n    '--color-secondary': currentTheme.colors.secondary,\n    '--color-bg': currentTheme.colors.background,\n    '--color-text': currentTheme.colors.text,\n    '--color-hover': currentTheme.colors.hover,\n    '--roundness': currentTheme.roundness,\n  }\n\n  const { dragInfo } = useDragContext()\n  const { position, setPosition, scale, setScale } = useScreenContext();\n\n  const [dstDragPosition, setDstDragPosition] = useState({ x: 0, y: 0 })\n  const [pointerPosition, setPointerPosition] = useState({ x: 0, y: 0 })\n\n  const [state, setState] = useState(initialState)\n  const [shouldNotify, setShouldNotify] = useState(false)\n\n  const debounceEvent = useCallback((fn, wait = 200, time) => (...args) =>\n    clearTimeout(time, (time = setTimeout(() => fn(...args), wait)))\n  , [])\n\n  useEffect(() => {\n    if (!initialState) return\n\n    setScale(initialState.scale)\n    setPosition(initialState.position)\n  }, [])\n\n  const setStateAndNotify = useCallback((cb) => {\n    setState(prev => {\n      const newState = cb(prev)\n      setShouldNotify(true)\n      return newState\n    })\n  }, [setState])\n\n  useEffect(() => {\n    if (shouldNotify) {\n        onChangeState(state);\n        setShouldNotify(false);\n    }\n}, [state, shouldNotify, onChangeState]);\n\n  useEffect(() => {\n    if (!dragInfo) {\n      setDstDragPosition(null)\n      return\n    }\n\n    //const { startX, startY } = dragInfo\n\n    const mouseMoveListener = (event) => {\n      setPointerPosition({\n        x: event.pageX - window.scrollX,\n        y: event.pageY - window.scrollY,\n      })\n\n      const dx = event.pageX //- startX\n      const dy = event.pageY //- startY\n\n      setDstDragPosition({ x: dx, y: dy })\n    }\n\n    window.addEventListener('mousemove', mouseMoveListener)\n    return () => {\n      window.removeEventListener('mousemove', mouseMoveListener)\n    }\n  }, [dragInfo])\n\n  const addNode = useCallback((nodeType, pos) => {\n    const newNode = {\n      id: nanoid(),\n      name: nodeType.label,\n      type: nodeType.type,\n      position: pos,\n      values: {}\n    }\n\n    setStateAndNotify(prev => ({\n      ...prev,\n      nodes: {\n        ...(prev.nodes ?? {}),\n        [newNode.id]: newNode\n      }\n    }))\n  }, [setStateAndNotify])\n\n  const removeNode = useCallback((id) => {\n    const node = state.nodes[id]\n    if (!node)  return\n\n    const nodesToRemove = [id]\n    const nodesToAdd = []\n\n    node.connections.outputs?.forEach(conn => {\n      const otherNode = state.nodes[conn.node]\n\n      if (!otherNode) return\n\n      nodesToRemove.push(otherNode.id)\n      nodesToAdd.push({\n        ...otherNode,\n        connections: {\n          outputs: otherNode.connections.outputs,\n          inputs: otherNode.connections.inputs.filter(c => !(c.port === conn.name && c.node === node.id))\n        }\n      })\n    })\n\n    node.connections.inputs?.forEach(conn => {\n      const otherNode = state.nodes[conn.node]\n\n      if (!otherNode) return\n\n      nodesToRemove.push(otherNode.id)\n      nodesToAdd.push({\n        ...otherNode,\n        connections: {\n          outputs: otherNode.connections.outputs.filter(c => !(c.port === conn.name && c.node === node.id)),\n          inputs: otherNode.connections.inputs\n        }\n      })\n    })\n\n    // change nodes to object[id]\n\n    setStateAndNotify(prev => {\n      const newNodes = {\n        ...(prev.nodes ?? {}),\n      }\n\n      nodesToRemove.forEach(id => {\n        delete newNodes[id]\n      })\n      nodesToAdd.forEach(node => {\n        newNodes[node.id] = node\n      })\n\n      return {\n        ...prev,\n        nodes: newNodes\n      }\n    })\n  }, [state, setStateAndNotify])\n\n  const cloneNode = useCallback((id) => {\n    const node = state.nodes[id]\n    if (!node)  return\n\n    const newNode = {\n      ...node,\n      id: nanoid(),\n      position: { x: node.position.x + 20, y: node.position.y + 20 },\n      connections: {\n        inputs: [],\n        outputs: []\n      }\n    }\n\n    setStateAndNotify(prev => ({\n      ...prev,\n      nodes: {\n        ...(prev.nodes ?? {}),\n        [newNode.id]: newNode\n      }\n    }))\n  }, [setStateAndNotify, state])\n\n  const removeConnectionFromOutput = useCallback((srcNode, srcPort, dstNode, dstPort) => {\n    setStateAndNotify(prev => {\n      const newNodes = {\n        ...(prev.nodes ?? {}),\n      }\n\n      if (!newNodes[srcNode] || !newNodes[dstNode]) return null\n\n      newNodes[srcNode] = {\n        ...newNodes[srcNode],\n        connections: {\n          ...newNodes[srcNode].connections,\n          outputs: newNodes[srcNode].connections.outputs.filter(conn => !(conn.name === srcPort && conn.node === dstNode && conn.port === dstPort))\n        }\n      }\n\n      newNodes[dstNode] = {\n        ...newNodes[dstNode],\n        connections: {\n          ...newNodes[dstNode].connections,\n          inputs: newNodes[dstNode].connections.inputs.filter(conn => !(conn.name === dstPort && conn.node === srcNode && conn.port === srcPort))\n        }\n      }\n\n      return {\n        ...prev,\n        nodes: newNodes\n      }\n    })\n  }, [setStateAndNotify])\n\n  const screenRef = useRef()\n\n  const [isMoveable, setIsMoveable] = useState(false);\n  const [canMove, setCanMove] = useState(true);\n\n  const onZoom = useCallback((params) => {\n    const _scale = params.state.scale;\n    setScale(_scale);\n\n    const _position = {x: params.state.positionX, y: params.state.positionY };\n    setPosition(_position);\n  }, [setPosition, setScale])\n\n  const onZoomEnd = useCallback((params) => {\n    setStateAndNotify(prev => {\n      const _scale = params.state.scale;\n      const _position = {x: params.state.positionX, y: params.state.positionY };\n\n      return {\n        ...prev,\n        scale: _scale,\n        position: _position\n      }\n    })\n  }, [setStateAndNotify])\n\n  const onTransform = useCallback((params) => {  \n    const _position = {x: params.state.positionX, y: params.state.positionY };\n    setPosition(_position);\n  }, [setPosition])\n\n  const onTransformEnd = useCallback((params) => {\n    const {\n      state: {\n        positionX,\n        positionY,\n        scale: _scale\n      }\n    } = params\n    \n    setPosition({x: positionX, y: positionY })\n    setScale(_scale)\n\n    debounceEvent((px, py, s) => {\n      setStateAndNotify(prev => {\n        return {\n          ...prev,\n          position: {x: px, y: py },\n          scale: s\n        }\n      })\n    }, 200)(positionX, positionY, _scale)\n  }, [setPosition, setScale, setStateAndNotify, debounceEvent])\n\n  const gridSize = 40;\n  const scaledGridSize = gridSize * (scale ?? 1);\n  const scaledPositionX = (position?.x ?? 0) % scaledGridSize;\n  const scaledPositionY = (position?.y ?? 0) % scaledGridSize;\n\n  const onConnect = useCallback(({ source, target }) => {\n    setStateAndNotify(prev => {\n      if (!prev?.nodes || !Object.keys(prev.nodes).length) return null;\n\n      const item = {\n        srcNode: source.nodeId,\n        dstNode: target.nodeId,\n        srcPort: source.portName,\n        dstPort: target.portName,\n      }\n\n      if (item.srcNode === item.dstNode) return;\n      \n      // deep merge\n      const srcNode = JSON.parse(JSON.stringify(prev.nodes[item.srcNode]));\n      const dstNode = JSON.parse(JSON.stringify(prev.nodes[item.dstNode]));\n\n      const srcPort = nodeTypes[srcNode.type].outputs(srcNode.values).find(p => p.name === item.srcPort);\n      const dstPort = nodeTypes[dstNode.type].inputs(dstNode.values).find(p => p.name === item.dstPort);\n\n      if (srcPort.type !== dstPort.type) return;\n\n      if (!srcNode.connections)   srcNode.connections = {};\n      if (!srcNode.connections.outputs) srcNode.connections.outputs = [];\n      if (!srcNode.connections.inputs)  srcNode.connections.inputs = [];\n\n\n      if (!dstNode.connections)   dstNode.connections = {};\n      if (!dstNode.connections.outputs) dstNode.connections.outputs = [];\n      if (!dstNode.connections.inputs)  dstNode.connections.inputs = [];\n\n      if (!srcNode.connections.outputs.find(c => c.name === dstPort.name)) {\n        srcNode.connections.outputs.push({ name: srcPort.name, node: dstNode.id, port: dstPort.name, type: srcPort.type });\n      }\n\n      if (!dstNode.connections.inputs.find(c => c.name === srcPort.name)) {\n        dstNode.connections.inputs.push({ name: dstPort.name, node: srcNode.id, port: srcPort.name, type: srcPort.type });\n      }\n\n      const nodes = {\n        ...prev.nodes,\n        [srcNode.id]: srcNode,\n        [dstNode.id]: dstNode\n      }\n\n      return {\n        ...prev,\n        nodes\n      }\n    })\n  }, [setStateAndNotify, nodeTypes]);\n\n  const pinchOptions = useMemo(() => ({\n    step: 5,\n  }), [])\n  const panningOptions = useMemo(() => ({\n    disabled: isMoveable,\n    excluded: [nodeCss.node, 'react-draggable', nodePortCss.port, nodePortCss.portConnector]\n  }), [isMoveable])\n\n  const wrapperStyle = useMemo(() => ({\n    height: '100vh', \n    width: '100vw',\n    backgroundColor: currentTheme.colors.background,\n    backgroundSize: `${scaledGridSize}px ${scaledGridSize}px`,\n    backgroundImage: `linear-gradient(to right, ${currentTheme.colors.hover} 1px, transparent 1px), linear-gradient(to bottom, ${currentTheme.colors.hover} 1px, transparent 1px)`,\n    backgroundPosition: `${scaledPositionX}px ${scaledPositionY}px`\n  }), [scaledGridSize, scaledPositionX, scaledPositionY, currentTheme])\n\n\n  const nodeTypesByCategory = useMemo(() => {\n    const categories = Object.values(nodeTypes).reduce((acc, nodeType) => {\n      const _category = nodeType.category ?? '...';\n      if (!acc[_category]) acc[_category] = [];\n      acc[_category].push(nodeType);\n      return acc;\n    }, {})\n\n    return Object.entries(categories).map(([category, nodeTypes]) => ({\n      category,\n      nodeTypes\n    }))\n  }, [nodeTypes])\n\n  const wrapperProps = useCallback((handleContextMenu) => ({\n    onDragOver: (e) => {\n      e.dataTransfer.dropEffect = \"move\";\n      e.dataTransfer.effectAllowed = \"move\";\n    },\n    onDragLeave: (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    onContextMenu: (e) => handleContextMenu(e, nodeTypesByCategory\n      .map(({ category, nodeTypes }) => ({\n        label: category,\n        children: nodeTypes.sort((a,b) => a.label.localeCompare(b.label)).map(nodeType => ({\n          label: `Adicionar ${nodeType.label}`,\n          description: nodeType.description,\n          onClick: () => {\n            const { x, y } = e.target.getBoundingClientRect();\n            const position = {\n              x: e.clientX, // - x,\n              y: e.clientY// - y\n            }\n            addNode(nodeType, position);\n          }\n        }))\n      }))\n    )\n  }), [nodeTypesByCategory, addNode])\n\n  const handleValueChange = useCallback((id, values) => {\n    setStateAndNotify(prev => {\n      return {\n        ...prev,\n        nodes: {\n          ...prev.nodes,\n          [id]: {\n            ...prev.nodes[id],\n            values\n          }\n        }\n      }\n    })\n  }, [setStateAndNotify])\n\n\n  if (!state) return null\n\n  const contRect = screenRef.current?.getBoundingClientRect();\n\n  return (\n    <div className={css.container} style={style} ref={screenRef}>\n      <TransformWrapper\n        initialScale={state?.scale ?? 1}\n        initialPositionX={state?.position?.x ?? 0}\n        initialPositionY={state?.position?.y ?? 0}\n        disabled={isMoveable}\n        minScale={.25}\n        maxScale={2}\n        limitToBounds={false}\n        onPanning={onTransform}\n        onZoom={onZoom}\n        pinch={pinchOptions}\n        panning={panningOptions}\n        onTransformed={onTransformEnd}\n      >\n        {({ zoomIn, zoomOut, resetTransform, setTransform, centerView,  ...rest }) => {\n          return (\n            <>\n              <div className={[css.panel, css.controlsPanel].join(' ')}>\n                <Button className={css.controlButton} onClick={() => zoomIn()}>+</Button>\n                <Button className={css.controlButton} onClick={() => zoomOut()}>-</Button>\n                <Button className={css.controlButton} onClick={() => {\n                  centerView();\n                  setStateAndNotify(prev => ({\n                    ...prev,\n                    position,\n                    scale\n                  }))\n                }}>C</Button>\n                <Button className={css.controlButton} onClick={() => {\n                  setTransform(position.x, position.y, 1);\n                  setScale(1);\n\n                  setStateAndNotify(prev => ({\n                    ...prev,\n                    position,\n                    scale: 1\n                  }))\n                }}>Z</Button>\n                \n                <Button className={css.controlButton} onClick={() => setCanMove(!canMove)}>{canMove ? 'L' : 'U'}</Button>\n              </div>\n\n              <div className={[css.panel, css.statusPanel].join(' ')}>\n                <div>Scale: {scale}</div>\n                <div>Position: {JSON.stringify(position)}</div>\n              </div>\n              <ContextMenu>\n                {({ handleContextMenu }) => (\n                  <TransformComponent \n                    contentClass='main' \n                    wrapperStyle={wrapperStyle}\n                    wrapperProps={wrapperProps(handleContextMenu)}\n                    >\n                    {state?.nodes && Object.values(state.nodes).map((node, index) => {\n                      return (\n                        <>\n                          <Node \n                            id={`node_${node.id}`}\n                            key={`node_${node.id}`} \n                            name={node.name}\n                            portTypes={portTypes}\n                            nodeType={nodeTypes?.[node.type]}\n                            value={node}\n                            onValueChange={(v) => {\n                              handleValueChange(node.id, { ...v.values })\n                            }}\n                            onChangePosition={(position) => {\n                              setState(prev => ({\n                                ...prev,\n                                nodes: {\n                                  ...prev.nodes,\n                                  [node.id]: {\n                                    ...prev.nodes[node.id],\n                                    position\n                                  }\n                                }\n                              }))\n                            }}\n                            onDragEnd={(position) => {\n                              setStateAndNotify(prev => ({\n                                ...prev,\n                                nodes: {\n                                  ...prev.nodes,\n                                  [node.id]: {\n                                    ...prev.nodes[node.id],\n                                    position\n                                  }\n                                }\n                              }))\n                            }}\n                            containerRef={screenRef}\n                            canMove={canMove}\n                            onConnect={onConnect}\n                            onContextMenu={(e) => handleContextMenu(e, [\n                              { label: 'Clonar este nó', onClick: () => {\n                                cloneNode(node.id)\n                              }},\n                              { \n                                label: `Remover este nó`, \n                                style: { color: 'red'},\n                                onClick: () => {\n                                  removeNode(node.id)\n                                }\n                              }\n                            ])}\n                            onResize={(size) => {\n                              // O objetivo aqui é disparar a renderização das conexões.\n                              // Se houver um modo melhor, por favor, me avise.\n                              setState(prev => ({\n                                ...prev,\n                                nodes: {\n                                  ...prev.nodes,\n                                  [node.id]: {\n                                    ...prev.nodes[node.id],\n                                    size,\n                                    connections: {\n                                      ...prev.nodes[node.id].connections,\n                                      outputs: [ ...(prev.nodes[node.id].connections?.outputs ?? [])],\n                                    }\n                                  }\n                                }\n                              }))\n                            }}\n                          />\n                          {node.connections?.outputs?.map((connection, index) => {\n                            const srcNode = node.id\n                            const srcPort = connection.name\n                            const dstNode = connection.node\n                            const dstPort = connection.port\n                            const connType = connection.type\n\n                            const srcElem = document.getElementById(`card-${srcNode}-output-${srcPort}`);\n                            const dstElem = document.getElementById(`card-${dstNode}-input-${dstPort}`);\n\n                            if (!srcElem || !dstElem || !contRect) {\n                              return null;\n                            }\n\n                            const srcRect = srcElem.getBoundingClientRect();\n                            const dstRect = dstElem.getBoundingClientRect();\n                      \n                            const srcPos = {\n                              x: (srcRect.x - position.x - contRect.left + srcRect.width / 2) / scale,\n                              y: (srcRect.y - position.y - contRect.top + srcRect.height / 2) / scale\n                            }\n                      \n                            const dstPos = {\n                              x: (dstRect.x - position.x - contRect.left + dstRect.width / 2) / scale,\n                              y: (dstRect.y - position.y - contRect.top + dstRect.height / 2) / scale\n                            }\n\n                            return <ConnectorCurve\n                              key={`connector-${srcNode}-${srcPort}-${dstNode}-${dstPort}`}\n                              type={portTypes[connType]}\n                              src={srcPos}\n                              dst={dstPos}\n                              scale={scale}\n                              onContextMenu={(e) => handleContextMenu(e, [\n                                canMove ? {\n                                  label: `Remover esta conexão`, \n                                  style: { color: 'red'},\n                                  onClick: () => {\n                                    removeConnectionFromOutput(srcNode, srcPort, dstNode, dstPort)\n                                  }\n                                } : null\n                              ].filter(Boolean))}\n                            />\n                          })}\n                        </>\n                      )\n                    })}\n\n                    {dragInfo && dstDragPosition ? <ConnectorCurve tmp src={{\n                      x: (dragInfo.startX - contRect.left - position.x + (PORT_SIZE / 2) - 2) / scale,\n                      y: (dragInfo.startY - contRect.top - position.y + (PORT_SIZE / 2) - 2) / scale\n                    }}\n                    dst={{\n                      x: (dstDragPosition.x - window.scrollX - contRect.left - position.x) / scale,\n                      y: (dstDragPosition.y - window.scrollY - contRect.top - position.y) / scale\n                    }}\n                    scale={scale}\n                    /> : null}\n                  </TransformComponent>\n                )}\n              </ContextMenu>      \n            </>\n          )\n        }}\n      </TransformWrapper>\n    </div>\n  );\n}\n\nexport default Screen;"],"names":["Screen","_ref","_position$x","_position$y","_screenRef$current","_state$scale","_state$position$x","_state$position","_state$position$y","_state$position2","portTypes","nodeTypes","onChangeState","initialState","currentTheme","useTheme","PORT_SIZE","style","concat","colors","primary","secondary","background","text","hover","roundness","dragInfo","useDragContext","position","setPosition","scale","setScale","useScreenContext","dstDragPosition","setDstDragPosition","useState","x","y","pointerPosition","setPointerPosition","state","setState","shouldNotify","setShouldNotify","debounceEvent","useCallback","fn","wait","arguments","length","undefined","time","_len","args","Array","_key","clearTimeout","setTimeout","useEffect","setStateAndNotify","cb","prev","newState","mouseMoveListener","event","pageX","window","scrollX","pageY","scrollY","dx","dy","addEventListener","removeEventListener","addNode","nodeType","pos","newNode","id","nanoid","name","label","type","values","_prev$nodes","_objectSpread","nodes","removeNode","_node$connections$out","_node$connections$inp","node","nodesToRemove","nodesToAdd","connections","outputs","forEach","conn","otherNode","push","inputs","filter","c","port","_prev$nodes2","newNodes","cloneNode","_prev$nodes3","removeConnectionFromOutput","srcNode","srcPort","dstNode","dstPort","_prev$nodes4","screenRef","useRef","isMoveable","setIsMoveable","canMove","setCanMove","onZoom","params","_scale","_position","positionX","positionY","onTransform","onTransformEnd","px","py","s","gridSize","scaledGridSize","scaledPositionX","scaledPositionY","onConnect","_ref2","source","target","Object","keys","item","nodeId","portName","JSON","parse","stringify","find","p","pinchOptions","useMemo","step","panningOptions","disabled","excluded","nodeCss","nodePortCss","portConnector","wrapperStyle","height","width","backgroundColor","backgroundSize","backgroundImage","backgroundPosition","nodeTypesByCategory","categories","reduce","acc","_nodeType$category","_category","category","entries","map","_ref3","wrapperProps","handleContextMenu","onDragOver","e","dataTransfer","dropEffect","effectAllowed","onDragLeave","preventDefault","stopPropagation","onContextMenu","_ref4","children","sort","a","b","localeCompare","description","onClick","getBoundingClientRect","clientX","clientY","handleValueChange","contRect","current","_jsx","className","css","container","ref","TransformWrapper","initialScale","initialPositionX","initialPositionY","minScale","maxScale","limitToBounds","onPanning","pinch","panning","onTransformed","_ref5","zoomIn","zoomOut","resetTransform","setTransform","centerView","rest","_objectWithoutProperties","_excluded","_jsxs","_Fragment","panel","controlsPanel","join","Button","controlButton","statusPanel","ContextMenu","_ref6","TransformComponent","contentClass","index","_node$connections","Node","value","onValueChange","v","onChangePosition","onDragEnd","containerRef","color","onResize","size","_prev$nodes$node$id$c","_prev$nodes$node$id$c2","connection","connType","srcElem","document","getElementById","dstElem","srcRect","dstRect","srcPos","left","top","dstPos","ConnectorCurve","src","dst","Boolean","tmp","startX","startY"],"mappings":"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"}
{"version":3,"file":"NodePort.js","sources":["../../../src/NodePort.jsx"],"sourcesContent":["import React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDragContext } from './DragContext.jsx';\nimport { useScreenContext } from './ScreenContext.jsx';\nimport css from './NodePort.module.css'\nimport { useTheme } from './ThemeProvider.js';\n\nconst globalToLocal = (globalX, globalY, translate, scale) => {\n  const localX = (globalX) / scale;\n  const localY = (globalY) / scale;\n  return { x: localX, y: localY };\n};\n\nfunction NodePort({ \n    name, \n    type, \n    nodeId,\n    label,\n    hidePort,\n    onConnected, \n    isConnected, \n    direction, \n    value,\n    onValueChange,\n    canMove\n  }) {\n  const { currentTheme } = useTheme()\n  const { position: screenPosition, scale: screenScale } = useScreenContext()\n  const { dragInfo, setDragInfo } = useDragContext()\n\n  const [internalValue, setInternalValue] = useState(value)\n\n  const shapeStyles = useMemo(() => ({\n    circle: css.circle,\n    square: css.square,\n    diamond: css.diamond,\n  }), [])\n\n  useEffect(() => {\n    if (!name)\n      throw new Error('Port name is required')\n  }, [name])\n\n  useEffect(() => {\n  }, [internalValue])\n\n  useEffect(() => {\n    if (isConnected) {\n      onValueChange?.(null)\n    }\n  }, [isConnected])\n\n  const containerRef = useRef(null)\n  const connectorRef = useRef(null)\n\n  const handleUpdateForm = useCallback((e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    onValueChange?.(internalValue)\n  }, [internalValue])\n\n  const connectorRect = useRef()\n  useEffect(() => {\n    if (!connectorRef.current) return\n    connectorRect.current = connectorRef.current.getBoundingClientRect()\n  }, [connectorRef.current])\n  \n  const containerRect = useRef()\n  useEffect(() => {\n    if (!containerRef.current) return\n    containerRect.current = containerRef.current.getBoundingClientRect()\n  }, [containerRef.current])\n\n  const [pointerPos, setPointerPos] = useState({ x: 0, y: 0 })\n  \n  const handleMouseDown = (event) => {\n    if (hidePort || !canMove) return\n\n    //event.preventDefault();\n    event.stopPropagation();\n\n    const nodePos = containerRef.current.getBoundingClientRect()\n    const localPos = globalToLocal(event.pageX - nodePos.left, event.pageY - nodePos.top, screenPosition, screenScale);\n    \n    const connectorRect = connectorRef.current.getBoundingClientRect()\n\n    const _dragInfo = {\n      type: 'connector',\n      nodeId,\n      portName: name,\n      portType: type,\n      startX: connectorRect.left,\n      startY: connectorRect.top,\n    }\n\n    setDragInfo(_dragInfo)\n\n    const handleMouseMove = (event) => {\n      if (!_dragInfo) return\n\n      if (_dragInfo.type !== 'connector') return\n\n      const localPos = globalToLocal(event.pageX - nodePos.left, event.pageY - nodePos.top, screenPosition, screenScale);\n      setPointerPos({ x: localPos.x, y: localPos.y })\n    }\n\n    const handleMouseUp = (e) => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setDragInfo(null)\n      if (!_dragInfo) return\n\n      const targets = document.elementsFromPoint(e.pageX - window.scrollX, e.pageY - window.scrollY);\n      const target = targets.find(t => t.classList?.contains(css.portOverlay) && t.dataset.portDirection.toString() !== direction.toString() && t.dataset.portType.toString() === type.type?.toString())\n\n      if (target) {\n       onConnected?.({ source: { nodeId, portName: name }, target: { nodeId: target.dataset.nodeId, portName: target.dataset.portName } });\n      }\n    }\n\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp);\n  };\n\n  return (\n    <div ref={containerRef} style={{ \n        cursor: !hidePort && canMove ? 'crosshair' : null\n      }} \n      className={css.port}\n      onMouseDown={handleMouseDown}\n    >\n      {!hidePort && (\n        <div style={{\n          left: direction === 'input' ? 'calc( var(--port-size) * -1.5 )' : 'calc( var(--port-size) * 1.5 )',\n          right: 0,\n          borderTopLeftRadius: direction === 'input' ? '15px' : null,\n          borderBottomLeftRadius: direction === 'input' ? '15px' : null,\n          borderTopRightRadius: direction === 'output' ? '15px' : null,\n          borderBottomRightRadius: direction === 'output' ? '15px' : null,\n        }} \n        className={css.portOverlay} \n        id={`card-${nodeId}-${direction}-${name}-overlay`}\n        data-port-name={name}\n        data-port-type={type.type}\n        data-port-direction={direction}\n        data-node-id={nodeId}\n        >\n        </div>\n      )}\n        \n      <div className={css.label} style={{ justifyContent: direction === 'input' ? 'flex-start' : 'flex-end' }}>\n        <span>{label}</span>\n      </div>\n      <div \n        className={css.formContainer}\n        //onBlur={handleUpdateForm}\n        onMouseDown={(e) => {\n          e.stopPropagation();\n        }}\n        >\n        {/* {direction === 'input' && !isConnected ? type.render({ value: internalValue, onChange: setInternalValue }) : null} */}\n        {(direction === 'input' && !isConnected && type.render?.({ value, onChange: onValueChange })) ?? null}\n      </div>\n      {!hidePort && (\n        <div \n          id={`card-${nodeId}-${direction}-${name}`}\n          ref={connectorRef}\n          style={{\n            background: currentTheme.ports?.[type?.type ?? 'default']?.color ?? currentTheme.ports?.default?.color ?? currentTheme.colors.background,\n            borderColor: isConnected ? currentTheme.colors.hover : currentTheme.colors.text,\n            left: direction === 'input' ? 'calc( var(--port-size) * -1 - 4px )' : null,\n            right: direction === 'output' ? 'calc( var(--port-size) * -1 - 4px )' : null,\n          }}\n          className={[css.portConnector, shapeStyles[type?.shape ?? 'circle'] ?? null].filter(Boolean).join(' ')}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(NodePort);\n"],"names":["globalToLocal","globalX","globalY","translate","scale","localX","localY","x","y","NodePort","_ref","_ref2","_type$render","_ref3","_currentTheme$ports$c","_currentTheme$ports","_currentTheme$ports2","_type$type2","_currentTheme$ports3","_currentTheme$ports3$","_shapeStyles","_type$shape","name","type","nodeId","label","hidePort","onConnected","isConnected","direction","value","onValueChange","canMove","currentTheme","useTheme","position","screenPosition","screenScale","useScreenContext","dragInfo","setDragInfo","useDragContext","internalValue","setInternalValue","useState","shapeStyles","useMemo","circle","css","square","diamond","useEffect","Error","containerRef","useRef","connectorRef","useCallback","e","preventDefault","stopPropagation","connectorRect","current","getBoundingClientRect","containerRect","pointerPos","setPointerPos","handleMouseDown","event","nodePos","pageX","left","pageY","top","_dragInfo","portName","portType","startX","startY","handleMouseMove","localPos","handleMouseUp","window","removeEventListener","targets","document","elementsFromPoint","scrollX","scrollY","target","find","t","_t$classList","_type$type","classList","contains","portOverlay","dataset","portDirection","toString","source","addEventListener","_jsxs","ref","style","cursor","className","port","onMouseDown","children","_jsx","right","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","id","concat","justifyContent","formContainer","render","call","onChange","background","ports","color","default","colors","borderColor","hover","text","portConnector","shape","filter","Boolean","join","memo"],"mappings":"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"}